'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace localhost
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WebService1Soap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WebService1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getStudentDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addStudentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private deleteStudentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private listCourseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCourseRegisteredStudentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private registerNewCourseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAllRegisteredCoursesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private emailTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WebApplication4.My.MySettings.Default.WebApplication4_localhost_WebService1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getStudentDataCompleted As getStudentDataCompletedEventHandler
        
        '''<remarks/>
        Public Event addStudentCompleted As addStudentCompletedEventHandler
        
        '''<remarks/>
        Public Event deleteStudentCompleted As deleteStudentCompletedEventHandler
        
        '''<remarks/>
        Public Event listCourseCompleted As listCourseCompletedEventHandler
        
        '''<remarks/>
        Public Event getCourseRegisteredStudentsCompleted As getCourseRegisteredStudentsCompletedEventHandler
        
        '''<remarks/>
        Public Event registerNewCourseCompleted As registerNewCourseCompletedEventHandler
        
        '''<remarks/>
        Public Event getAllRegisteredCoursesCompleted As getAllRegisteredCoursesCompletedEventHandler
        
        '''<remarks/>
        Public Event emailTestCompleted As emailTestCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/List Student", RequestElementName:="List Student", RequestNamespace:="http://tempuri.org/", ResponseElementName:="List StudentResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getStudentData() As <System.Xml.Serialization.XmlElementAttribute("List StudentResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getStudentData", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStudentDataAsync()
            Me.getStudentDataAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStudentDataAsync(ByVal userState As Object)
            If (Me.getStudentDataOperationCompleted Is Nothing) Then
                Me.getStudentDataOperationCompleted = AddressOf Me.OngetStudentDataOperationCompleted
            End If
            Me.InvokeAsync("getStudentData", New Object(-1) {}, Me.getStudentDataOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStudentDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStudentDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStudentDataCompleted(Me, New getStudentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Add Student", RequestElementName:="Add Student", RequestNamespace:="http://tempuri.org/", ResponseElementName:="Add StudentResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addStudent(ByVal id As String, ByVal name As String, ByVal type As String) As <System.Xml.Serialization.XmlElementAttribute("Add StudentResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("addStudent", New Object() {id, name, type})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addStudentAsync(ByVal id As String, ByVal name As String, ByVal type As String)
            Me.addStudentAsync(id, name, type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addStudentAsync(ByVal id As String, ByVal name As String, ByVal type As String, ByVal userState As Object)
            If (Me.addStudentOperationCompleted Is Nothing) Then
                Me.addStudentOperationCompleted = AddressOf Me.OnaddStudentOperationCompleted
            End If
            Me.InvokeAsync("addStudent", New Object() {id, name, type}, Me.addStudentOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddStudentOperationCompleted(ByVal arg As Object)
            If (Not (Me.addStudentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addStudentCompleted(Me, New addStudentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete Student", RequestElementName:="Delete Student", RequestNamespace:="http://tempuri.org/", ResponseElementName:="Delete StudentResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub deleteStudent(ByVal id As String)
            Me.Invoke("deleteStudent", New Object() {id})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub deleteStudentAsync(ByVal id As String)
            Me.deleteStudentAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub deleteStudentAsync(ByVal id As String, ByVal userState As Object)
            If (Me.deleteStudentOperationCompleted Is Nothing) Then
                Me.deleteStudentOperationCompleted = AddressOf Me.OndeleteStudentOperationCompleted
            End If
            Me.InvokeAsync("deleteStudent", New Object() {id}, Me.deleteStudentOperationCompleted, userState)
        End Sub
        
        Private Sub OndeleteStudentOperationCompleted(ByVal arg As Object)
            If (Not (Me.deleteStudentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent deleteStudentCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/List Course", RequestElementName:="List Course", RequestNamespace:="http://tempuri.org/", ResponseElementName:="List CourseResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function listCourse() As <System.Xml.Serialization.XmlElementAttribute("List CourseResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("listCourse", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub listCourseAsync()
            Me.listCourseAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub listCourseAsync(ByVal userState As Object)
            If (Me.listCourseOperationCompleted Is Nothing) Then
                Me.listCourseOperationCompleted = AddressOf Me.OnlistCourseOperationCompleted
            End If
            Me.InvokeAsync("listCourse", New Object(-1) {}, Me.listCourseOperationCompleted, userState)
        End Sub
        
        Private Sub OnlistCourseOperationCompleted(ByVal arg As Object)
            If (Not (Me.listCourseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent listCourseCompleted(Me, New listCourseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get Course Registered Students", RequestElementName:="Get Course Registered Students", RequestNamespace:="http://tempuri.org/", ResponseElementName:="Get Course Registered StudentsResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCourseRegisteredStudents(ByVal id As String) As <System.Xml.Serialization.XmlElementAttribute("Get Course Registered StudentsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCourseRegisteredStudents", New Object() {id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCourseRegisteredStudentsAsync(ByVal id As String)
            Me.getCourseRegisteredStudentsAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCourseRegisteredStudentsAsync(ByVal id As String, ByVal userState As Object)
            If (Me.getCourseRegisteredStudentsOperationCompleted Is Nothing) Then
                Me.getCourseRegisteredStudentsOperationCompleted = AddressOf Me.OngetCourseRegisteredStudentsOperationCompleted
            End If
            Me.InvokeAsync("getCourseRegisteredStudents", New Object() {id}, Me.getCourseRegisteredStudentsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCourseRegisteredStudentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCourseRegisteredStudentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCourseRegisteredStudentsCompleted(Me, New getCourseRegisteredStudentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Register course", RequestElementName:="Register course", RequestNamespace:="http://tempuri.org/", ResponseElementName:="Register courseResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub registerNewCourse(ByVal s_id As String, ByVal s_name As String, ByVal c_id As String, ByVal c_title As String, ByVal c_w_hours As String)
            Me.Invoke("registerNewCourse", New Object() {s_id, s_name, c_id, c_title, c_w_hours})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub registerNewCourseAsync(ByVal s_id As String, ByVal s_name As String, ByVal c_id As String, ByVal c_title As String, ByVal c_w_hours As String)
            Me.registerNewCourseAsync(s_id, s_name, c_id, c_title, c_w_hours, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub registerNewCourseAsync(ByVal s_id As String, ByVal s_name As String, ByVal c_id As String, ByVal c_title As String, ByVal c_w_hours As String, ByVal userState As Object)
            If (Me.registerNewCourseOperationCompleted Is Nothing) Then
                Me.registerNewCourseOperationCompleted = AddressOf Me.OnregisterNewCourseOperationCompleted
            End If
            Me.InvokeAsync("registerNewCourse", New Object() {s_id, s_name, c_id, c_title, c_w_hours}, Me.registerNewCourseOperationCompleted, userState)
        End Sub
        
        Private Sub OnregisterNewCourseOperationCompleted(ByVal arg As Object)
            If (Not (Me.registerNewCourseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent registerNewCourseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get all registered courses", RequestElementName:="Get all registered courses", RequestNamespace:="http://tempuri.org/", ResponseElementName:="Get all registered coursesResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAllRegisteredCourses(ByVal id As String) As <System.Xml.Serialization.XmlElementAttribute("Get all registered coursesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAllRegisteredCourses", New Object() {id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAllRegisteredCoursesAsync(ByVal id As String)
            Me.getAllRegisteredCoursesAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAllRegisteredCoursesAsync(ByVal id As String, ByVal userState As Object)
            If (Me.getAllRegisteredCoursesOperationCompleted Is Nothing) Then
                Me.getAllRegisteredCoursesOperationCompleted = AddressOf Me.OngetAllRegisteredCoursesOperationCompleted
            End If
            Me.InvokeAsync("getAllRegisteredCourses", New Object() {id}, Me.getAllRegisteredCoursesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAllRegisteredCoursesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAllRegisteredCoursesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAllRegisteredCoursesCompleted(Me, New getAllRegisteredCoursesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/email test", RequestElementName:="email test", RequestNamespace:="http://tempuri.org/", ResponseElementName:="email testResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function emailTest() As <System.Xml.Serialization.XmlElementAttribute("email testResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("emailTest", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub emailTestAsync()
            Me.emailTestAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub emailTestAsync(ByVal userState As Object)
            If (Me.emailTestOperationCompleted Is Nothing) Then
                Me.emailTestOperationCompleted = AddressOf Me.OnemailTestOperationCompleted
            End If
            Me.InvokeAsync("emailTest", New Object(-1) {}, Me.emailTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnemailTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.emailTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent emailTestCompleted(Me, New emailTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getStudentDataCompletedEventHandler(ByVal sender As Object, ByVal e As getStudentDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getStudentDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub addStudentCompletedEventHandler(ByVal sender As Object, ByVal e As addStudentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addStudentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub deleteStudentCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub listCourseCompletedEventHandler(ByVal sender As Object, ByVal e As listCourseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class listCourseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getCourseRegisteredStudentsCompletedEventHandler(ByVal sender As Object, ByVal e As getCourseRegisteredStudentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCourseRegisteredStudentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub registerNewCourseCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getAllRegisteredCoursesCompletedEventHandler(ByVal sender As Object, ByVal e As getAllRegisteredCoursesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAllRegisteredCoursesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub emailTestCompletedEventHandler(ByVal sender As Object, ByVal e As emailTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class emailTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
